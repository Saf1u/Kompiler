
/*
COVERS:
syntaticanalysis(3.1-3.19)_astgeneration(4.1-4.3.1)_symbolTable(5.1-5.3.1)
*/
//3&4.13
class vehicle{
private attribute tires:integer;
attribute doors:integer;
public attribute spec:integer[5];
public attribute nesting:nestedX[1];
public attribute multiSpec:integer[1][1];
public  function getTires: () => integer; 
function setTires: (x:integer) => void; 
};

class nestedX{
attribute x:nestedY[5][5];
};
class nestedY{
attribute x:integer[5];
};

class transport  {
private attribute fuel:integer;
};

//3&4.13
class car isa vehicle,transport{
attribute rpm :integer;
};

//3&4.12
function vehicle::getTires()=>integer{
    return (self.tires+4);
}
function vehicle::setTires(x:integer)=>void{
    tires=x;
}
//3&4.12
function main()=>void{
    //3&4.11
    localvar myCar:car;
    localvar myCars:car[2];
    myCars[1]=myCar;
    localvar x:integer;
    myCars[1].setTires(10);
    //3&4.19
    read(myCars[1].spec[((200-198)+(1)*(2))-3]);
    //3&4.16
    read(myCars[1].multiSpec[0][1]);
    write(myCars[1].getTires());
    //3&4.14
    write(complexArithmetic(10)+(200/2)+(myCars[1].spec[1])+(myCars[1].multiSpec[0][1]));
    myCars[1].nesting[0].x[1][2].x[0]=101;
    //3&4.18
    write(myCars[1].nesting[0].x[1][2].x[0]);
    //in->44 in->22 out->14,266,101
    //3&4.17
    conditional();
    loop();
}

//3&4.12
function complexArithmetic(x:integer)=>integer{
return(x*(4+6));
}

function conditional()=>void{
    //out->200,100
    if (1>1) then
    write(100);else write(200);;

    //3&4.14
    if ((complexArithmetic(10))>=(200-100))then{
    write(100);
    }else {
        write(200);
    };
}

function loop()=>void{
    //3&4.15
    //out->21,21
    localvar x:integer;
    while(x<=20)
    x=x+1;;
    write(x);
    x=0;

    while(x<=20){
    x=x+1;
    };
    write(x);
}



