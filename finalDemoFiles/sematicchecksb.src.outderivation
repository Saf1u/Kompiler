 REPTSTART0
 CLASSDECLORFUNCDEF REPTSTART0
 FUNCDEF REPTSTART0
 FUNCHEAD FUNCBODY REPTSTART0
 function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => TYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer S2E FUNCBODY REPTSTART0
function side ( ) => integer S2E FUNCBODY REPTSTART0
function side ( ) => integer lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + VARIABLEORFUNC RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + id S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z S3 S9 S10 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + floatlit S13 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 S13 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( floatlit S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } CLASSDECLORFUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } FUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } FUNCHEAD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => TYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } CLASSDECLORFUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } CLASSDECL REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; CLASSDECLORFUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; CLASSDECL REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } semi S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; S46 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; CLASSDECLORFUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; FUNCDEF REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; FUNCHEAD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet S1 FUNCMETHOD FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void S2E FUNCBODY REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( pasta S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( pasta S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( pasta ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( pasta ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function side ( ) => integer { localvar z : integer ; localvar y : float ; localvar x : integer ; x = y + z + 10 + 200 + 2.3e10 ; return ( 1.1 ) ; } function sideb ( ) => integer { x = 33 ; } class ogHuman { attribute superage : integer ; } ; class human isa ogHuman { attribute age : integer ; public function greet : ( ) => void ; } ; function human :: greet ( ) => void { write ( age ) ; write ( superage ) ; write ( pasta ) ; } S36 REPTSTART0
