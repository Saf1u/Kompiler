 REPTSTART0
 CLASSDECLORFUNCDEF REPTSTART0
 FUNCDEF REPTSTART0
 FUNCHEAD FUNCBODY REPTSTART0
 function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix lpar S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix lpar S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply VARIABLEORFUNCPRIME1 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply S3 lpar APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( EXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( ARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print VARIABLEASSIGNORFUNCCALLPRIME1 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) semi REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( SIGN S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( minus S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - intlit S5 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 S5 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print VARIABLEASSIGNORFUNCCALLPRIME1 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) semi REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( SIGN S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( minus S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - intlit S5 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 S5 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print VARIABLEASSIGNORFUNCCALLPRIME1 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) semi REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 ADDOP S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 minus S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 ADDOP S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 minus S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - S20 TERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] S9 S28 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write lpar EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( EXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) semi S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; S30 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } CLASSDECL REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer ARRAYSIZE REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer lsqbr ARRAYSIZEPRIME REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ ARRAYSIZEPRIME REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ intlit S5X rsqbr REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 S5X rsqbr REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] ARRAYSIZE REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] lsqbr ARRAYSIZEPRIME REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ ARRAYSIZEPRIME REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ intlit S5X rsqbr REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 S5X rsqbr REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : id S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => TYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => id S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } semi S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; S46 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; FUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor S3 lpar FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) S39 FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] S9 S28 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : id S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => TYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => id S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix lpar S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] S9 S28 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = lpar ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( TERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] S9 S28 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * VARIABLEORFUNC S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * id S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . id S1 S8 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix S1 S8 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix S3 INDICE VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] INDICE VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] VARIABLEORFUNCPRIME2 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] S9 S28 S19 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + VARIABLEORFUNC RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + id S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] VARIABLEORFUNCPRIME2 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] S9 S28 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self S3 S9 S10 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf VARIABLEASSIGNORFUNCCALLPRIME1 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( EXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( ARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) semi REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) S3 STATBLOCK S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self S3 S9 S10 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] S9 S28 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } S32 semi S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; S34 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = val S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = val S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = val ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar matrixa : Matrix ( 10 , 9 , 4 , 6 , 71 , 11 , 2 , 4 , 5 ) ; localvar matrixb : Matrix ( 1 , 11 , 7 , 12 , 42 , 21 , 42 , 2 , 4 ) ; localvar matrixc : Matrix ; matrixc = matrixa . multiply ( matrixb ) ; matrixc . print ( ) ; write ( - 1 ) ; matrixa . print ( ) ; write ( - 1 ) ; matrixb . print ( ) ; write ( matrixb . matrix [ 3 - 1 ] [ 1 - 1 ] ) ; write ( matrixb . flag ) ; } class Matrix { attribute matrix : integer [ 3 ] [ 3 ] ; attribute flag : integer ; public constructor : ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) ; public function multiply : ( x : Matrix ) => Matrix ; public function print : ( ) => void ; private function TestSelf : ( v : integer ) => void ; } ; function Matrix :: constructor ( a : integer , b : integer , c : integer , d : integer , e : integer , f : integer , g : integer , h : integer , i : integer ) { localvar mat : Matrix ; mat . matrix [ 0 ] [ 0 ] = a ; mat . matrix [ 0 ] [ 1 ] = b ; mat . matrix [ 0 ] [ 2 ] = c ; mat . matrix [ 1 ] [ 0 ] = d ; mat . matrix [ 1 ] [ 1 ] = e ; mat . matrix [ 1 ] [ 2 ] = f ; mat . matrix [ 2 ] [ 0 ] = g ; mat . matrix [ 2 ] [ 1 ] = h ; mat . matrix [ 2 ] [ 2 ] = i ; return ( mat ) ; } function Matrix :: multiply ( x : Matrix ) => Matrix { localvar i : integer ; localvar j : integer ; localvar n : integer ; localvar matrixc : Matrix ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; i = 0 ; j = 0 ; n = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { n = 0 ; while ( n <> 3 ) { matrixc . matrix [ i ] [ j ] = ( self . matrix [ i ] [ n ] * x . matrix [ n ] [ j ] ) + matrixc . matrix [ i ] [ j ] ; n = n + 1 ; } ; j = j + 1 ; } ; i = i + 1 ; } ; return ( matrixc ) ; } function Matrix :: print ( ) => void { self . TestSelf ( 341 ) ; localvar i : integer ; localvar j : integer ; i = 0 ; j = 0 ; while ( i <> 3 ) { j = 0 ; while ( j <> 3 ) { write ( self . matrix [ i ] [ j ] ) ; j = j + 1 ; } ; i = i + 1 ; } ; } function Matrix :: TestSelf ( val : integer ) => void { flag = val ; } S36 REPTSTART0
