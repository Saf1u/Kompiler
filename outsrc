
[Token Type:CommentToken:// ====== struct declarations ====== //\n lineNum:1] [Token Type:IDTokenToken:class lineNum:1] [Token Type:IDTokenToken:POLYNOMIAL lineNum:1] [Token Type:openCurlyBracketToken:{ lineNum:1] 
[Token Type:IDTokenToken:public lineNum:2] [Token Type:IDTokenToken:function lineNum:2] [Token Type:IDTokenToken:evaluate lineNum:2] [Token Type:columnToken:: lineNum:2] [Token Type:closedParanthesisToken:( lineNum:2] [Token Type:IDTokenToken:x lineNum:2] [Token Type:columnToken:: lineNum:2] [Token Type:IDTokenToken:float lineNum:2] [Token Type:openParenthesisToken:) lineNum:2] [Token Type:LambdaTokenToken:=> lineNum:2] [Token Type:IDTokenToken:float lineNum:2] [Token Type:invalidCharacterToken:; lineNum:2] 
[Token Type:closeCurlyBracketToken:} lineNum:3] [Token Type:invalidCharacterToken:; lineNum:3] 

[Token Type:IDTokenToken:class lineNum:5] [Token Type:IDTokenToken:LINEAR lineNum:5] [Token Type:IDTokenToken:isa lineNum:5] [Token Type:IDTokenToken:POLYNOMIAL lineNum:5] [Token Type:openCurlyBracketToken:{ lineNum:5] 
[Token Type:IDTokenToken:private lineNum:6] [Token Type:IDTokenToken:attribute lineNum:6] [Token Type:IDTokenToken:a lineNum:6] [Token Type:columnToken:: lineNum:6] [Token Type:IDTokenToken:float lineNum:6] [Token Type:invalidCharacterToken:; lineNum:6] 
[Token Type:IDTokenToken:private lineNum:7] [Token Type:IDTokenToken:attribute lineNum:7] [Token Type:IDTokenToken:b lineNum:7] [Token Type:columnToken:: lineNum:7] [Token Type:IDTokenToken:float lineNum:7] [Token Type:invalidCharacterToken:; lineNum:7] 
[Token Type:IDTokenToken:public lineNum:8] [Token Type:IDTokenToken:constructor lineNum:8] [Token Type:columnToken:: lineNum:8] [Token Type:closedParanthesisToken:( lineNum:8] [Token Type:IDTokenToken:A lineNum:8] [Token Type:columnToken:: lineNum:8] [Token Type:IDTokenToken:float lineNum:8] [Token Type:invalidCharacterToken:, lineNum:8] [Token Type:IDTokenToken:B lineNum:8] [Token Type:columnToken:: lineNum:8] [Token Type:IDTokenToken:float lineNum:8] [Token Type:openParenthesisToken:) lineNum:8] [Token Type:invalidCharacterToken:; lineNum:8] 
[Token Type:IDTokenToken:public lineNum:9] [Token Type:IDTokenToken:function lineNum:9] [Token Type:IDTokenToken:evaluate lineNum:9] [Token Type:columnToken:: lineNum:9] [Token Type:closedParanthesisToken:( lineNum:9] [Token Type:IDTokenToken:x lineNum:9] [Token Type:columnToken:: lineNum:9] [Token Type:IDTokenToken:float lineNum:9] [Token Type:openParenthesisToken:) lineNum:9] [Token Type:LambdaTokenToken:=> lineNum:9] [Token Type:IDTokenToken:float lineNum:9] [Token Type:invalidCharacterToken:; lineNum:9] 
[Token Type:closeCurlyBracketToken:} lineNum:10] [Token Type:invalidCharacterToken:; lineNum:10] 

[Token Type:IDTokenToken:class lineNum:12] [Token Type:IDTokenToken:QUADRATIC lineNum:12] [Token Type:IDTokenToken:isa lineNum:12] [Token Type:IDTokenToken:POLYNOMIAL lineNum:12] [Token Type:openCurlyBracketToken:{ lineNum:12] 
[Token Type:IDTokenToken:private lineNum:13] [Token Type:IDTokenToken:attribute lineNum:13] [Token Type:IDTokenToken:a lineNum:13] [Token Type:columnToken:: lineNum:13] [Token Type:IDTokenToken:float lineNum:13] [Token Type:invalidCharacterToken:; lineNum:13] 
[Token Type:IDTokenToken:private lineNum:14] [Token Type:IDTokenToken:attribute lineNum:14] [Token Type:IDTokenToken:b lineNum:14] [Token Type:columnToken:: lineNum:14] [Token Type:IDTokenToken:float lineNum:14] [Token Type:invalidCharacterToken:; lineNum:14] 
[Token Type:IDTokenToken:private lineNum:15] [Token Type:IDTokenToken:attribute lineNum:15] [Token Type:IDTokenToken:c lineNum:15] [Token Type:columnToken:: lineNum:15] [Token Type:IDTokenToken:float lineNum:15] [Token Type:invalidCharacterToken:; lineNum:15] 
[Token Type:IDTokenToken:public lineNum:16] [Token Type:IDTokenToken:constructor lineNum:16] [Token Type:columnToken:: lineNum:16] [Token Type:closedParanthesisToken:( lineNum:16] [Token Type:IDTokenToken:A lineNum:16] [Token Type:columnToken:: lineNum:16] [Token Type:IDTokenToken:float lineNum:16] [Token Type:invalidCharacterToken:, lineNum:16] [Token Type:IDTokenToken:B lineNum:16] [Token Type:columnToken:: lineNum:16] [Token Type:IDTokenToken:float lineNum:16] [Token Type:invalidCharacterToken:, lineNum:16] [Token Type:IDTokenToken:C lineNum:16] [Token Type:columnToken:: lineNum:16] [Token Type:IDTokenToken:float lineNum:16] [Token Type:openParenthesisToken:) lineNum:16] [Token Type:invalidCharacterToken:; lineNum:16] 
[Token Type:IDTokenToken:public lineNum:17] [Token Type:IDTokenToken:function lineNum:17] [Token Type:IDTokenToken:evaluate lineNum:17] [Token Type:columnToken:: lineNum:17] [Token Type:closedParanthesisToken:( lineNum:17] [Token Type:IDTokenToken:x lineNum:17] [Token Type:columnToken:: lineNum:17] [Token Type:IDTokenToken:float lineNum:17] [Token Type:openParenthesisToken:) lineNum:17] [Token Type:LambdaTokenToken:=> lineNum:17] [Token Type:IDTokenToken:float lineNum:17] [Token Type:invalidCharacterToken:; lineNum:17] 
[Token Type:closeCurlyBracketToken:} lineNum:18] [Token Type:invalidCharacterToken:; lineNum:18] 


[Token Type:CommentToken:// ====== member function implementations ====== //  \n lineNum:21] [Token Type:IDTokenToken:function lineNum:21] [Token Type:IDTokenToken:POLYNOMIAL lineNum:21] [Token Type:ScopeResTokenToken::: lineNum:21] [Token Type:IDTokenToken:evaluate lineNum:21] [Token Type:closedParanthesisToken:( lineNum:21] [Token Type:IDTokenToken:x lineNum:21] [Token Type:columnToken:: lineNum:21] [Token Type:IDTokenToken:float lineNum:21] [Token Type:openParenthesisToken:) lineNum:21] [Token Type:LambdaTokenToken:=> lineNum:21] [Token Type:IDTokenToken:float lineNum:21] 
[Token Type:openCurlyBracketToken:{ lineNum:22] 
[Token Type:IDTokenToken:return lineNum:23] [Token Type:closedParanthesisToken:( lineNum:23] [Token Type:IntegerTokenToken:0 lineNum:23] [Token Type:openParenthesisToken:) lineNum:23] [Token Type:invalidCharacterToken:; lineNum:23] 
[Token Type:closeCurlyBracketToken:} lineNum:24] 

[Token Type:IDTokenToken:function lineNum:26] [Token Type:IDTokenToken:QUADRATIC lineNum:26] [Token Type:ScopeResTokenToken::: lineNum:26] [Token Type:IDTokenToken:evaluate lineNum:26] [Token Type:closedParanthesisToken:( lineNum:26] [Token Type:IDTokenToken:x lineNum:26] [Token Type:columnToken:: lineNum:26] [Token Type:IDTokenToken:float lineNum:26] [Token Type:openParenthesisToken:) lineNum:26] [Token Type:LambdaTokenToken:=> lineNum:26] [Token Type:IDTokenToken:float lineNum:26] 
[Token Type:openCurlyBracketToken:{ lineNum:27] 
[Token Type:IDTokenToken:localvar lineNum:28] [Token Type:IDTokenToken:result lineNum:28] [Token Type:columnToken:: lineNum:28] [Token Type:IDTokenToken:float lineNum:28] [Token Type:invalidCharacterToken:; lineNum:28] 

[Token Type:CommentToken://Using Horner's method\n lineNum:30] [Token Type:IDTokenToken:result lineNum:30] [Token Type:assignmentToken:= lineNum:30] [Token Type:IDTokenToken:a lineNum:30] [Token Type:invalidCharacterToken:; lineNum:30] 
[Token Type:IDTokenToken:result lineNum:31] [Token Type:assignmentToken:= lineNum:31] [Token Type:IDTokenToken:result lineNum:31] [Token Type:multiplyToken:* lineNum:31] [Token Type:IDTokenToken:x lineNum:31] [Token Type:plusToken:+ lineNum:31] [Token Type:IDTokenToken:b lineNum:31] [Token Type:invalidCharacterToken:; lineNum:31] 
[Token Type:IDTokenToken:result lineNum:32] [Token Type:assignmentToken:= lineNum:32] [Token Type:IDTokenToken:result lineNum:32] [Token Type:multiplyToken:* lineNum:32] [Token Type:IDTokenToken:x lineNum:32] [Token Type:plusToken:+ lineNum:32] [Token Type:IDTokenToken:c lineNum:32] [Token Type:invalidCharacterToken:; lineNum:32] 
[Token Type:IDTokenToken:return lineNum:33] [Token Type:closedParanthesisToken:( lineNum:33] [Token Type:IDTokenToken:result lineNum:33] [Token Type:openParenthesisToken:) lineNum:33] [Token Type:invalidCharacterToken:; lineNum:33] 
[Token Type:closeCurlyBracketToken:} lineNum:34] 

[Token Type:IDTokenToken:function lineNum:36] [Token Type:IDTokenToken:QUADRATIC lineNum:36] [Token Type:ScopeResTokenToken::: lineNum:36] [Token Type:IDTokenToken:constructor lineNum:36] [Token Type:closedParanthesisToken:( lineNum:36] [Token Type:IDTokenToken:A lineNum:36] [Token Type:columnToken:: lineNum:36] [Token Type:IDTokenToken:float lineNum:36] [Token Type:invalidCharacterToken:, lineNum:36] [Token Type:IDTokenToken:B lineNum:36] [Token Type:columnToken:: lineNum:36] [Token Type:IDTokenToken:float lineNum:36] [Token Type:invalidCharacterToken:, lineNum:36] [Token Type:IDTokenToken:C lineNum:36] [Token Type:columnToken:: lineNum:36] [Token Type:IDTokenToken:float lineNum:36] [Token Type:openParenthesisToken:) lineNum:36] 
[Token Type:openCurlyBracketToken:{ lineNum:37] 
[Token Type:IDTokenToken:self lineNum:38] [Token Type:DotTokenToken:. lineNum:38] [Token Type:IDTokenToken:a lineNum:38] [Token Type:assignmentToken:= lineNum:38] [Token Type:IDTokenToken:A lineNum:38] [Token Type:invalidCharacterToken:; lineNum:38] 
[Token Type:IDTokenToken:self lineNum:39] [Token Type:DotTokenToken:. lineNum:39] [Token Type:IDTokenToken:b lineNum:39] [Token Type:assignmentToken:= lineNum:39] [Token Type:IDTokenToken:B lineNum:39] [Token Type:invalidCharacterToken:; lineNum:39] 
[Token Type:IDTokenToken:self lineNum:40] [Token Type:DotTokenToken:. lineNum:40] [Token Type:IDTokenToken:c lineNum:40] [Token Type:assignmentToken:= lineNum:40] [Token Type:IDTokenToken:C lineNum:40] [Token Type:invalidCharacterToken:; lineNum:40] 
[Token Type:closeCurlyBracketToken:} lineNum:41] 

[Token Type:IDTokenToken:function lineNum:43] [Token Type:IDTokenToken:LINEAR lineNum:43] [Token Type:ScopeResTokenToken::: lineNum:43] [Token Type:IDTokenToken:constructor lineNum:43] [Token Type:closedParanthesisToken:( lineNum:43] [Token Type:IDTokenToken:A lineNum:43] [Token Type:columnToken:: lineNum:43] [Token Type:IDTokenToken:float lineNum:43] [Token Type:invalidCharacterToken:, lineNum:43] [Token Type:IDTokenToken:B lineNum:43] [Token Type:columnToken:: lineNum:43] [Token Type:IDTokenToken:float lineNum:43] [Token Type:openParenthesisToken:) lineNum:43] 
[Token Type:openCurlyBracketToken:{ lineNum:44] 
[Token Type:IDTokenToken:self lineNum:45] [Token Type:DotTokenToken:. lineNum:45] [Token Type:IDTokenToken:a lineNum:45] [Token Type:assignmentToken:= lineNum:45] [Token Type:IDTokenToken:A lineNum:45] [Token Type:invalidCharacterToken:; lineNum:45] 
[Token Type:IDTokenToken:self lineNum:46] [Token Type:DotTokenToken:. lineNum:46] [Token Type:IDTokenToken:b lineNum:46] [Token Type:assignmentToken:= lineNum:46] [Token Type:IDTokenToken:B lineNum:46] [Token Type:invalidCharacterToken:; lineNum:46] 
[Token Type:closeCurlyBracketToken:} lineNum:47] 

[Token Type:IDTokenToken:function lineNum:49] [Token Type:IDTokenToken:LINEAR lineNum:49] [Token Type:ScopeResTokenToken::: lineNum:49] [Token Type:IDTokenToken:evaluate lineNum:49] [Token Type:closedParanthesisToken:( lineNum:49] [Token Type:IDTokenToken:x lineNum:49] [Token Type:columnToken:: lineNum:49] [Token Type:IDTokenToken:float lineNum:49] [Token Type:openParenthesisToken:) lineNum:49] [Token Type:LambdaTokenToken:=> lineNum:49] [Token Type:IDTokenToken:float lineNum:49] 
[Token Type:openCurlyBracketToken:{ lineNum:50] 
[Token Type:IDTokenToken:localvar lineNum:51] [Token Type:IDTokenToken:result lineNum:51] [Token Type:columnToken:: lineNum:51] [Token Type:IDTokenToken:float lineNum:51] [Token Type:invalidCharacterToken:; lineNum:51] 
[Token Type:IDTokenToken:result lineNum:52] [Token Type:assignmentToken:= lineNum:52] [Token Type:floatTokenToken:0.0 lineNum:52] [Token Type:invalidCharacterToken:; lineNum:52] 
[Token Type:IDTokenToken:result lineNum:53] [Token Type:assignmentToken:= lineNum:53] [Token Type:IDTokenToken:a lineNum:53] [Token Type:multiplyToken:* lineNum:53] [Token Type:IDTokenToken:x lineNum:53] [Token Type:plusToken:+ lineNum:53] [Token Type:IDTokenToken:b lineNum:53] [Token Type:invalidCharacterToken:; lineNum:53] 
[Token Type:IDTokenToken:return lineNum:54] [Token Type:closedParanthesisToken:( lineNum:54] [Token Type:IDTokenToken:result lineNum:54] [Token Type:openParenthesisToken:) lineNum:54] [Token Type:invalidCharacterToken:; lineNum:54] 
[Token Type:closeCurlyBracketToken:} lineNum:55] 


[Token Type:CommentToken:// ====== main ====== //\n lineNum:58] [Token Type:IDTokenToken:function lineNum:58] [Token Type:IDTokenToken:main lineNum:58] [Token Type:closedParanthesisToken:( lineNum:58] [Token Type:openParenthesisToken:) lineNum:58] [Token Type:LambdaTokenToken:=> lineNum:58] [Token Type:IDTokenToken:void lineNum:58] 
[Token Type:openCurlyBracketToken:{ lineNum:59] 
[Token Type:IDTokenToken:localvar lineNum:60] [Token Type:IDTokenToken:f1 lineNum:60] [Token Type:columnToken:: lineNum:60] [Token Type:IDTokenToken:LINEAR lineNum:60] [Token Type:closedParanthesisToken:( lineNum:60] [Token Type:IntegerTokenToken:2 lineNum:60] [Token Type:invalidCharacterToken:, lineNum:60] [Token Type:floatTokenToken:3.5 lineNum:60] [Token Type:openParenthesisToken:) lineNum:60] [Token Type:invalidCharacterToken:; lineNum:60] 
[Token Type:IDTokenToken:localvar lineNum:61] [Token Type:IDTokenToken:f2 lineNum:61] [Token Type:columnToken:: lineNum:61] [Token Type:IDTokenToken:QUADRATIC lineNum:61] [Token Type:closedParanthesisToken:( lineNum:61] [Token Type:minusToken:- lineNum:61] [Token Type:floatTokenToken:2.0 lineNum:61] [Token Type:invalidCharacterToken:, lineNum:61] [Token Type:floatTokenToken:1.0 lineNum:61] [Token Type:invalidCharacterToken:, lineNum:61] [Token Type:floatTokenToken:0.0 lineNum:61] [Token Type:openParenthesisToken:) lineNum:61] [Token Type:invalidCharacterToken:; lineNum:61] 
[Token Type:IDTokenToken:localvar lineNum:62] [Token Type:IDTokenToken:counter lineNum:62] [Token Type:columnToken:: lineNum:62] [Token Type:IDTokenToken:integer lineNum:62] [Token Type:assignmentToken:= lineNum:62] [Token Type:IntegerTokenToken:1 lineNum:62] [Token Type:invalidCharacterToken:; lineNum:62] 

[Token Type:IDTokenToken:while lineNum:64] [Token Type:closedParanthesisToken:( lineNum:64] [Token Type:IDTokenToken:counter lineNum:64] [Token Type:LessThanEqualTokenToken:<= lineNum:64] [Token Type:IntegerTokenToken:10 lineNum:64] [Token Type:openParenthesisToken:) lineNum:64] 
[Token Type:openCurlyBracketToken:{ lineNum:65] 
[Token Type:IDTokenToken:write lineNum:66] [Token Type:closedParanthesisToken:( lineNum:66] [Token Type:IDTokenToken:counter lineNum:66] [Token Type:openParenthesisToken:) lineNum:66] [Token Type:invalidCharacterToken:; lineNum:66] 
[Token Type:IDTokenToken:write lineNum:67] [Token Type:closedParanthesisToken:( lineNum:67] [Token Type:IDTokenToken:f1 lineNum:67] [Token Type:DotTokenToken:. lineNum:67] [Token Type:IDTokenToken:evaluate lineNum:67] [Token Type:closedParanthesisToken:( lineNum:67] [Token Type:IDTokenToken:counter lineNum:67] [Token Type:openParenthesisToken:) lineNum:67] [Token Type:openParenthesisToken:) lineNum:67] [Token Type:invalidCharacterToken:; lineNum:67] 
[Token Type:IDTokenToken:write lineNum:68] [Token Type:closedParanthesisToken:( lineNum:68] [Token Type:IDTokenToken:f2 lineNum:68] [Token Type:DotTokenToken:. lineNum:68] [Token Type:IDTokenToken:evaluate lineNum:68] [Token Type:closedParanthesisToken:( lineNum:68] [Token Type:IDTokenToken:counter lineNum:68] [Token Type:openParenthesisToken:) lineNum:68] [Token Type:openParenthesisToken:) lineNum:68] [Token Type:invalidCharacterToken:; lineNum:68] 
[Token Type:closeCurlyBracketToken:} lineNum:69] [Token Type:invalidCharacterToken:; lineNum:69] 
[Token Type:closeCurlyBracketToken:} lineNum:70] 
[Token Type:CommentToken:/*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/ lineNum:200] 
