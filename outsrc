[eq, ==, 1] [plus, +, 1] [or, or, 1] [openpar, (, 1] [semi, ;, 1] [integer, integer, 1] [while, while, 1] [localvar, localvar, 1] 
[noteq, <>, 2] [minus, -, 2] [and, and, 2] [closepar, ), 2] [comma, ,, 2] [float, float, 2] [if, if, 2] [constructor, constructor, 2] 
[lt, <, 3] [mult, *, 3] [not, not, 3] [opencubr, {, 3] [dot, ., 3] [void, void, 3] [then, then, 3] [attribute, attribute, 3] 
[gt, >, 4] [div, /, 4] [closecubr, }, 4] [colon, :, 4] [class, class, 4] [else, else, 4] [function, function, 4] 
[leq, <=, 5] [assign, =, 5] [opensqbr, [, 5] [returntype, =>, 5] [self, self, 5] [read, read, 5] [public, public, 5] 
[geq, >=, 6] [closesqbr, ], 6] [scopeop, ::, 6] [isa, isa, 6] [write, write, 6] [private, private, 6] 
[return, return, 7] 

[intnum, 0, 9] 
[intnum, 1, 10] 
[intnum, 10, 11] 
[intnum, 12, 12] 
[intnum, 123, 13] 
[intnum, 12345, 14] 

[floatnum, 1.23, 16] 
[floatnum, 12.34, 17] 
[floatnum, 120.34e10, 18] 
[floatnum, 12345.6789e-123, 19] 

[id, abc, 21] 
[id, abc1, 22] 
[id, a1bc, 23] 
[id, abc_1abc, 24] 
[id, abc1_abc, 25] 

[inlinecmt, // this is an inline comment, 27] 

[blockcmt, /* this is a single line block comment */, 29] 

[blockcmt, /* this is a \nmultiple line\nblock comment \n*/, 34] 

[blockcmt, /* this is an imbricated \n/* block comment\n*/\n*/, 39] 


4] [id, arr, 14] [opensqbr, [, 14] [id, j, 14] [plus, +, 14] [intnum, 1, 14] [closesqbr, ], 14] [closepar, ), 14] 
[then, then, 15] [opencubr, {, 15] 
[inlinecmt, // swap temp and arr[i], 16] 
[id, temp, 17] [assign, =, 17] [id, arr, 17] [opensqbr, [, 17] [id, j, 17] [closesqbr, ], 17] [semi, ;, 17] 
[id, arr, 18] [opensqbr, [, 18] [id, j, 18] [closesqbr, ], 18] [assign, =, 18] [id, arr, 18] [opensqbr, [, 18] [id, j, 18] [plus, +, 18] [intnum, 1, 18] [closesqbr, ], 18] [semi, ;, 18] 
[id, arr, 19] [opensqbr, [, 19] [id, j, 19] [plus, +, 19] [intnum, 1, 19] [closesqbr, ], 19] [assign, =, 19] [id, temp, 19] [semi, ;, 19] 
[closecubr, }, 20] [else, else, 20] [semi, ;, 20] 
[id, j, 21] [assign, =, 21] [id, j, 21] [plus, +, 21] [intnum, 1, 21] [semi, ;, 21] 
[closecubr, }, 22] [semi, ;, 22] 
[id, i, 23] [assign, =, 23] [id, i, 23] [plus, +, 23] [intnum, 1, 23] [semi, ;, 23] 
[closecubr, }, 24] [semi, ;, 24] 
[closecubr, }, 25] 

[blockcmt, /* print the array */, 27] 
[function, function, 28] [id, printArray, 28] [openpar, (, 28] [id, arr, 28] [colon, :, 28] [integer, integer, 28] [opensqbr, [, 28] [closesqbr, ], 28] [comma, ,, 28] [id, size, 28] [colon, :, 28] [integer, integer, 28] [closepar, ), 28] [returntype, =>, 28] [void, void, 28] 
[opencubr, {, 29] 
[localvar, localvar, 30] [id, n, 30] [colon, :, 30] [integer, integer, 30] [semi, ;, 30] 
[localvar, localvar, 31] [id, i, 31] [colon, :, 31] [integer, integer, 31] [semi, ;, 31] 
[id, n, 32] [assign, =, 32] [id, size, 32] [semi, ;, 32] 
[id, i, 33] [assign, =, 33] [intnum, 0, 33] [semi, ;, 33] 
[while, while, 34] [openpar, (, 34] [id, i, 34] [lt, <, 34] [id, n, 34] [closepar, ), 34] [opencubr, {, 34] 
[write, write, 35] [openpar, (, 35] [id, arr, 35] [opensqbr, [, 35] [id, i, 35] [closesqbr, ], 35] [closepar, ), 35] [semi, ;, 35] 
[id, i, 36] [assign, =, 36] [id, i, 36] [plus, +, 36] [intnum, 1, 36] [semi, ;, 36] 
[closecubr, }, 37] [semi, ;, 37] 
[closecubr, }, 38] 

[inlinecmt, // main funtion to test above, 40] 
[function, function, 41] [id, main, 41] [openpar, (, 41] [closepar, ), 41] [returntype, =>, 41] [void, void, 41] 
[opencubr, {, 42] 
[localvar, localvar, 43] [id, arr, 43] [colon, :, 43] [integer, integer, 43] [opensqbr, [, 43] [intnum, 7, 43] [closesqbr, ], 43] [semi, ;, 43] 
[id, arr, 44] [opensqbr, [, 44] [intnum, 0, 44] [closesqbr, ], 44] [assign, =, 44] [intnum, 64, 44] [semi, ;, 44] 
[id, arr, 45] [opensqbr, [, 45] [intnum, 1, 45] [closesqbr, ], 45] [assign, =, 45] [intnum, 34, 45] [semi, ;, 45] 
[id, arr, 46] [opensqbr, [, 46] [intnum, 2, 46] [closesqbr, ], 46] [assign, =, 46] [intnum, 25, 46] [semi, ;, 46] 
[id, arr, 47] [opensqbr, [, 47] [intnum, 3, 47] [closesqbr, ], 47] [assign, =, 47] [intnum, 12, 47] [semi, ;, 47] 
[id, arr, 48] [opensqbr, [, 48] [intnum, 4, 48] [closesqbr, ], 48] [assign, =, 48] [intnum, 22, 48] [semi, ;, 48] 
[id, arr, 49] [opensqbr, [, 49] [intnum, 5, 49] [closesqbr, ], 49] [assign, =, 49] [intnum, 11, 49] [semi, ;, 49] 
[id, arr, 50] [opensqbr, [, 50] [intnum, 6, 50] [closesqbr, ], 50] [assign, =, 50] [intnum, 90, 50] [semi, ;, 50] 
[id, printarray, 51] [openpar, (, 51] [id, arr, 51] [comma, ,, 51] [intnum, 7, 51] [closepar, ), 51] [semi, ;, 51] 
[id, bubbleSort, 52] [openpar, (, 52] [id, arr, 52] [comma, ,, 52] [intnum, 7, 52] [closepar, ), 52] [semi, ;, 52] 
[id, printarray, 53] [openpar, (, 53] [id, arr, 53] [comma, ,, 53] [intnum, 7, 53] [closepar, ), 53] [semi, ;, 53] 
[closecubr, }, 54] 

[blockcmt, /*\n    classes\n    --------------------------------------\n|X| no class declaration\n| | class declaration\n| | multiple class declarations\n| | no data member declaration\n| | data member declaration\n| | multiple data member declaration\n| | no member function declaration\n| | member function declaration\n| | multiple member function declaration\n| | no member\n| | no inherited class\n| | one inherited class\n| | multiple inherited classes\n| | private member specifier\n| | public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n| | no free function definition\n|X| free function definition\n|X| multiple free function definitions\n|X| no member function definition\n| | member function definition\n| | multiple member function definitions\n|X| return type: void\n| | return type: integer\n| | return type: float\n| | return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n|X| type: array (without size)\n\n    functions: calls\n    --------------------------------------\n|X| free function call\n| | member function call\n| | parameters:0\n| | parameters:1\n|X| parameters:n\n|X| array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n| | function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n|X| type: integer\n| | type: float\n| | type: string\n| | type: id\n|X| type: 1-dim array \n| | type: n-dim array\n|X| type: array (with size)\n| | type: array (without size) (not allowed)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n|X| if statement\n|X| if: empty then or else blocks\n| | if: 1-statement then or else blocks\n|X| if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n| | id.id\n| | id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n|X| single variable\n|X| involving addop\n| | involving multop\n|X| involving relop\n| | involving addop + multop\n|X| involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parentheses\n| | involving not\n| | involving sign\n|X| involving literals\n| | involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 185] 
