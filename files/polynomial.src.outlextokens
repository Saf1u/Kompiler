[inlinecmt, // ====== struct declarations ====== //, 1]
[class, class, 2][id, POLYNOMIAL, 2][lcurbr, {, 2]
[public, public, 3][function, function, 3][id, evaluate, 3][colon, :, 3][lpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][rpar, ), 3][arrow, =>, 3][float, float, 3][semi, ;, 3]
[rcurbr, }, 4][semi, ;, 4]

[class, class, 6][id, LINEAR, 6][isa, isa, 6][id, POLYNOMIAL, 6][lcurbr, {, 6]
[private, private, 7][attribute, attribute, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][attribute, attribute, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][constructor, constructor, 9][colon, :, 9][lpar, (, 9][id, A, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, B, 9][colon, :, 9][float, float, 9][rpar, ), 9][semi, ;, 9]
[public, public, 10][function, function, 10][id, evaluate, 10][colon, :, 10][lpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][rpar, ), 10][arrow, =>, 10][float, float, 10][semi, ;, 10]
[rcurbr, }, 11][semi, ;, 11]

[class, class, 13][id, QUADRATIC, 13][isa, isa, 13][id, POLYNOMIAL, 13][lcurbr, {, 13]
[private, private, 14][attribute, attribute, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][attribute, attribute, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[private, private, 16][attribute, attribute, 16][id, c, 16][colon, :, 16][float, float, 16][semi, ;, 16]
[public, public, 17][constructor, constructor, 17][colon, :, 17][lpar, (, 17][id, A, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, B, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, C, 17][colon, :, 17][float, float, 17][rpar, ), 17][semi, ;, 17]
[public, public, 18][function, function, 18][id, evaluate, 18][colon, :, 18][lpar, (, 18][id, x, 18][colon, :, 18][float, float, 18][rpar, ), 18][arrow, =>, 18][float, float, 18][semi, ;, 18]
[rcurbr, }, 19][semi, ;, 19]

[inlinecmt, // ====== member function implementations ====== //  , 21]
[function, function, 22][id, POLYNOMIAL, 22][sr, ::, 22][id, evaluate, 22][lpar, (, 22][id, x, 22][colon, :, 22][float, float, 22][rpar, ), 22][arrow, =>, 22][float, float, 22]
[lcurbr, {, 23]
[return, return, 24][lpar, (, 24][intlit, 0, 24][rpar, ), 24][semi, ;, 24]
[rcurbr, }, 25]

[function, function, 27][id, QUADRATIC, 27][sr, ::, 27][id, evaluate, 27][lpar, (, 27][id, x, 27][colon, :, 27][float, float, 27][rpar, ), 27][arrow, =>, 27][float, float, 27]
[lcurbr, {, 28]
[localvar, localvar, 29][id, result, 29][colon, :, 29][float, float, 29][semi, ;, 29]
[inlinecmt, //Using Horner's method, 30]
[id, result, 31][equal, =, 31][id, a, 31][semi, ;, 31]
[id, aha, 32][equal, =, 32][id, x, 32][semi, ;, 32]
[id, result, 33][equal, =, 33][id, result, 33][mult, *, 33][id, x, 33][plus, +, 33][id, b, 33][semi, ;, 33]
[id, result, 34][equal, =, 34][id, result, 34][mult, *, 34][id, x, 34][plus, +, 34][id, c, 34][semi, ;, 34]
[return, return, 35][lpar, (, 35][id, result, 35][rpar, ), 35][semi, ;, 35]
[rcurbr, }, 36]

[function, function, 38][id, QUADRATIC, 38][sr, ::, 38][constructor, constructor, 38][lpar, (, 38][id, A, 38][colon, :, 38][float, float, 38][comma, ,, 38][id, B, 38][colon, :, 38][float, float, 38][comma, ,, 38][id, C, 38][colon, :, 38][float, float, 38][rpar, ), 38]
[lcurbr, {, 39]
[self, self, 40][dot, ., 40][id, a, 40][equal, =, 40][id, A, 40][semi, ;, 40]
[self, self, 41][dot, ., 41][id, b, 41][equal, =, 41][id, B, 41][semi, ;, 41]
[self, self, 42][dot, ., 42][id, c, 42][equal, =, 42][id, C, 42][semi, ;, 42]
[rcurbr, }, 43]

[function, function, 45][id, LINEAR, 45][sr, ::, 45][constructor, constructor, 45][lpar, (, 45][id, A, 45][colon, :, 45][float, float, 45][comma, ,, 45][id, B, 45][colon, :, 45][float, float, 45][rpar, ), 45]
[lcurbr, {, 46]
[self, self, 47][dot, ., 47][id, a, 47][equal, =, 47][id, A, 47][semi, ;, 47]
[self, self, 48][dot, ., 48][id, b, 48][equal, =, 48][id, B, 48][semi, ;, 48]
[rcurbr, }, 49]

[function, function, 51][id, LINEAR, 51][sr, ::, 51][id, evaluate, 51][lpar, (, 51][id, x, 51][colon, :, 51][float, float, 51][rpar, ), 51][arrow, =>, 51][float, float, 51]
[lcurbr, {, 52]
[localvar, localvar, 53][id, result, 53][colon, :, 53][float, float, 53][semi, ;, 53]
[id, result, 54][equal, =, 54][floatlit, 0.0, 54][semi, ;, 54]
[id, result, 55][equal, =, 55][id, a, 55][mult, *, 55][id, x, 55][plus, +, 55][id, b, 55][semi, ;, 55]
[return, return, 56][lpar, (, 56][id, result, 56][rpar, ), 56][semi, ;, 56]
[rcurbr, }, 57]

[inlinecmt, // ====== main ====== //, 59]
[function, function, 60][id, main, 60][lpar, (, 60][rpar, ), 60][arrow, =>, 60][void, void, 60]
[lcurbr, {, 61]
[localvar, localvar, 62][id, f1, 62][colon, :, 62][id, LINEAR, 62][lpar, (, 62][intlit, 2, 62][comma, ,, 62][floatlit, 3.5, 62][rpar, ), 62][semi, ;, 62]
[localvar, localvar, 63][id, f2, 63][colon, :, 63][id, QUADRATIC, 63][lpar, (, 63][minus, -, 63][floatlit, 2.0, 63][comma, ,, 63][floatlit, 1.0, 63][comma, ,, 63][floatlit, 0.0, 63][rpar, ), 63][semi, ;, 63]
[localvar, localvar, 64][id, counter, 64][colon, :, 64][integer, integer, 64][semi, ;, 64]
[id, counter, 65][equal, =, 65][id, id, 65][dot, ., 65][id, id, 65][dot, ., 65][id, id, 65][dot, ., 65][id, id, 65][semi, ;, 65]

[while, while, 67][lpar, (, 67][id, counter, 67][leq, <=, 67][intlit, 10, 67][rpar, ), 67]
[lcurbr, {, 68]
[write, write, 69][lpar, (, 69][id, counter, 69][rpar, ), 69][semi, ;, 69]
[write, write, 70][lpar, (, 70][id, f1, 70][dot, ., 70][id, evaluate, 70][lpar, (, 70][id, counter, 70][rpar, ), 70][rpar, ), 70][semi, ;, 70]
[write, write, 71][lpar, (, 71][id, f2, 71][dot, ., 71][id, evaluate, 71][lpar, (, 71][id, counter, 71][rpar, ), 71][rpar, ), 71][semi, ;, 71]
[rcurbr, }, 72][semi, ;, 72]
[rcurbr, }, 73]
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 203]
