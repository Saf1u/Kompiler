[inlinecmt, // ====== struct declarations ====== //, 1]


[class, class, 4][id, POLYNOMIAL, 4][lcurbr, {, 4]
[inlinecmt, // public  function evaluate: (x: float) => float;, 5]
[inlinecmt, //  private attribute z:int;, 6]

[rcurbr, }, 8][semi, ;, 8]

[class, class, 10][id, LINEAR, 10][isa, isa, 10][id, POLYNOMIAL, 10][lcurbr, {, 10]
[private, private, 11][attribute, attribute, 11][id, a, 11][colon, :, 11][float, float, 11][semi, ;, 11]
[private, private, 12][attribute, attribute, 12][id, evaluate, 12][colon, :, 12][float, float, 12][semi, ;, 12]

[rcurbr, }, 14][semi, ;, 14]
[class, class, 15][id, QUADRATIC, 15][isa, isa, 15][id, LINEAR, 15][comma, ,, 15][id, zo, 15][lcurbr, {, 15]
[public, public, 16][constructor, constructor, 16][colon, :, 16][lpar, (, 16][id, A, 16][colon, :, 16][float, float, 16][comma, ,, 16][id, B, 16][colon, :, 16][float, float, 16][lsqbr, [, 16][rsqbr, ], 16][rpar, ), 16][semi, ;, 16]
[public, public, 17][function, function, 17][id, evaluate, 17][colon, :, 17][lpar, (, 17][id, x, 17][colon, :, 17][float, float, 17][rpar, ), 17][arrow, =>, 17][id, int, 17][semi, ;, 17]
[rcurbr, }, 18][semi, ;, 18]

[class, class, 20][id, zo, 20][lcurbr, {, 20]
[inlinecmt, // private attribute z:int;, 21]
[private, private, 22][attribute, attribute, 22][id, z, 22][colon, :, 22][id, int, 22][semi, ;, 22]
[rcurbr, }, 23][semi, ;, 23]







[function, function, 31][id, QUADRATIC, 31][sr, ::, 31][id, evaluate, 31][lpar, (, 31][id, x, 31][colon, :, 31][float, float, 31][rpar, ), 31][arrow, =>, 31][id, int, 31][lcurbr, {, 31]

[rcurbr, }, 33]

[function, function, 35][id, QUADRATIC, 35][sr, ::, 35][constructor, constructor, 35][lpar, (, 35][id, A, 35][colon, :, 35][float, float, 35][comma, ,, 35][id, C, 35][colon, :, 35][float, float, 35][lsqbr, [, 35][rsqbr, ], 35][rpar, ), 35]
[lcurbr, {, 36]
[localvar, localvar, 37][id, x, 37][colon, :, 37][id, int, 37][semi, ;, 37]
[localvar, localvar, 38][id, y, 38][colon, :, 38][id, int, 38][semi, ;, 38]
[id, y, 39][equal, =, 39][id, x, 39][semi, ;, 39]
[id, y, 40][equal, =, 40][id, z, 40][semi, ;, 40]
[blockcmt, /*self.a = A;\nself.b = B;\nself.c = C;*/, 43]

[rcurbr, }, 45]



[function, function, 49][id, main, 49][lpar, (, 49][id, f1, 49][colon, :, 49][float, float, 49][rpar, ), 49][arrow, =>, 49][void, void, 49]
[lcurbr, {, 50]
[localvar, localvar, 51][id, z1, 51][colon, :, 51][id, LINEAR, 51][lpar, (, 51][intlit, 2, 51][comma, ,, 51][floatlit, 3.5, 51][rpar, ), 51][semi, ;, 51]
[inlinecmt, //x=id[1][2][x][1*2+4*6+3+5/3];, 52]
[localvar, localvar, 53][id, f2, 53][colon, :, 53][id, QUADRATIC, 53][lpar, (, 53][minus, -, 53][floatlit, 2.0, 53][comma, ,, 53][floatlit, 1.0, 53][comma, ,, 53][floatlit, 0.0, 53][rpar, ), 53][semi, ;, 53]
[localvar, localvar, 54][id, counter, 54][colon, :, 54][integer, integer, 54][semi, ;, 54]
[inlinecmt, //counter = id.id.id.id;, 55]

[while, while, 57][lpar, (, 57][id, counter, 57][leq, <=, 57][intlit, 10, 57][rpar, ), 57]
[lcurbr, {, 58]
[write, write, 59][lpar, (, 59][id, counter, 59][rpar, ), 59][semi, ;, 59]
[write, write, 60][lpar, (, 60][id, f1, 60][dot, ., 60][id, evaluate, 60][lpar, (, 60][id, counter, 60][rpar, ), 60][rpar, ), 60][semi, ;, 60]
[write, write, 61][lpar, (, 61][id, f2, 61][dot, ., 61][id, evaluate, 61][lpar, (, 61][id, counter, 61][rpar, ), 61][rpar, ), 61][semi, ;, 61]
[rcurbr, }, 62][semi, ;, 62]
[rcurbr, }, 63]



[function, function, 67][id, test, 67][lpar, (, 67][rpar, ), 67][arrow, =>, 67][id, int, 67]
[lcurbr, {, 68]

[rcurbr, }, 70]
[function, function, 71][id, test, 71][lpar, (, 71][id, x, 71][colon, :, 71][id, string, 71][rpar, ), 71][arrow, =>, 71][id, int, 71]
[lcurbr, {, 72]

[rcurbr, }, 74]



