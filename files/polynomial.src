// ====== struct declarations ====== //


class POLYNOMIAL {
  public function evaluate: (x: float) => float;
  public  function darkevaluate: (x: float) => float;
  private attribute evaluate: float;
};

class LINEAR isa POLYNOMIAL,QUADRATIC {
  private attribute a: float;
  private attribute evaluate: float;
  public  constructor: (A: float, B: float[]);
  public  function evaluate: (x: float) => float;
  public  function darkevaluate: (x: float,y:int) => float;

};
class QUADRATIC  {
  public  constructor: (A: float, B: float[]);
   public  function evaluate: (x:int) => int;
};

function QUADRATIC::evaluate () => void{

}

function QUADRATIC::constructor(A: float, B: int, C: float[])
{
self.a = A;
self.b = B;
self.c = C;
localvar resulta: float[2];
localvar resultb: float[][];
localvar resultc: color;
}



function main() => void
{
  localvar f1: LINEAR(2, 3.5);
  localvar f2: QUADRATIC(-2.0, 1.0, 0.0);
  localvar counter: integer ;	
  counter = id.id.id.id;

  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}



function test() => int
{
  
}
function test(x:string) => int
{
  
}


