 REPTSTART0
 CLASSDECLORFUNCDEF REPTSTART0
 CLASSDECL REPTSTART0
 S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => TYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; CLASSDECL REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa id S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL S1 REPTOPTCLASSDECL22 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor S1 colon S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : S3 lpar FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( FPARAMS rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float ARRAYSIZE REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float lsqbr ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ intlit S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] ARRAYSIZE REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] lsqbr ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ intlit S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] ARRAYSIZE REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] lsqbr ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ intlit S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 S5 rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float FPARAMSTAIL REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 rpar S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) S35 semi S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; S39 S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( FPARAMS rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) S35 arrow RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => RETURNTYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => TYPE S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float S2 semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } semi S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; S46 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => TYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => TYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * VARIABLEORFUNC S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * id S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + VARIABLEORFUNC RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + id S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * VARIABLEORFUNC S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * id S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + VARIABLEORFUNC RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + id S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor S3 lpar FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] S9 S28 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor S37 FUNCCONSTRUCTOR FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor S3 lpar FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( FPARAMS S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float FPARAMSTAIL REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float comma id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , id S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B S1 colon TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : TYPE S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float S2 S3 REPTFPARAMSTAIL4 S6 S7 REPTFPARAMS4 S35 rpar S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) S39 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate S1 FUNCMETHOD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => TYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = floatlit S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * VARIABLEORFUNC S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * id S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x S1 VARIABLEORFUNCPRIME S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + VARIABLEORFUNC RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + id S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b S1 VARIABLEORFUNCPRIME RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } CLASSDECLORFUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } FUNCDEF REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } FUNCHEAD FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( FPARAMS S35 rpar arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) arrow RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => RETURNTYPE S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void S2 FUNCBODY REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR lpar S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , floatlit S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC lpar S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( S3 APARAMS S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( SIGN S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( minus S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - S16 FACTOR S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - floatlit S13 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 S13 S15 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , floatlit S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 APARAMSTAIL REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 comma EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , EXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , ARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , floatlit S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 S13 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 rpar semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id dot id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id dot id S1 VARIABLEORFUNCPRIME S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id S1 VARIABLEORFUNCPRIME S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id S1 VARIABLEORFUNCPRIME S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id dot id S1 VARIABLEORFUNCPRIME S8 S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id S1 VARIABLEORFUNCPRIME S8 S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id S1 VARIABLEORFUNCPRIME S8 S8 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter leq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 dot id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate VARIABLEORFUNCPRIME1 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate S3 lpar APARAMS S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( APARAMS S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( EXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 dot id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . id S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate S1 VARIABLEORFUNCPRIME S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate VARIABLEORFUNCPRIME1 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate S3 lpar APARAMS S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( APARAMS S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( EXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( ARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 S22 S11 rpar VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) VARIABLEORFUNCPRIME3 S8 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
class LINEAR isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; public constructor : ( A : float , B : float ) ; public function evaluate : ( x : float ) => float ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : float ; private attribute b : float ; private attribute c : float ; public constructor : ( A : float [ 1 ] [ 2 ] [ 3 ] , B : float , C : float ) ; public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : float ) => float { localvar result : float ; result = a ; aha = x ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : float , B : float , C : float ) { self . a . b [ 1 ] [ 2 ] . c = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : float , B : float ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : float ) => float { localvar result : float ; result = 0.0 ; result = a * x + b ; return ( result ) ; } function main ( ) => void { localvar f1 : LINEAR ( 2 , 3.5 ) ; localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; localvar counter : integer ; counter = id . id . id . id ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; } S36 REPTSTART0
