[inlinecmt, // ====== struct declarations ====== //, 1]
[class, class, 2][id, POLYNOMIAL, 2][opencubr, {, 2]
[public, public, 3][function, function, 3][id, evaluate, 3][colon, :, 3][openpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][closepar, ), 3][returntype, =>, 3][float, float, 3][semi, ;, 3]
[closecubr, }, 4][semi, ;, 4]

[class, class, 6][id, LINEAR, 6][isa, isa, 6][id, POLYNOMIAL, 6][opencubr, {, 6]
[private, private, 7][attribute, attribute, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][attribute, attribute, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][constructor, constructor, 9][colon, :, 9][openpar, (, 9][id, A, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, B, 9][colon, :, 9][float, float, 9][closepar, ), 9][semi, ;, 9]
[public, public, 10][function, function, 10][id, evaluate, 10][colon, :, 10][openpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][closepar, ), 10][returntype, =>, 10][float, float, 10][semi, ;, 10]
[closecubr, }, 11][semi, ;, 11]

[class, class, 13][id, QUADRATIC, 13][isa, isa, 13][id, POLYNOMIAL, 13][opencubr, {, 13]
[private, private, 14][attribute, attribute, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][attribute, attribute, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[private, private, 16][attribute, attribute, 16][id, c, 16][colon, :, 16][float, float, 16][semi, ;, 16]
[public, public, 17][constructor, constructor, 17][colon, :, 17][openpar, (, 17][id, A, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, B, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, C, 17][colon, :, 17][float, float, 17][closepar, ), 17][semi, ;, 17]
[public, public, 18][function, function, 18][id, evaluate, 18][colon, :, 18][openpar, (, 18][id, x, 18][colon, :, 18][float, float, 18][closepar, ), 18][returntype, =>, 18][float, float, 18][semi, ;, 18]
[closecubr, }, 19][semi, ;, 19]

[inlinecmt, // ====== member function implementations ====== //  , 21]
[function, function, 22][id, POLYNOMIAL, 22][scopeop, ::, 22][id, evaluate, 22][openpar, (, 22][id, x, 22][colon, :, 22][float, float, 22][closepar, ), 22][returntype, =>, 22][float, float, 22]
[opencubr, {, 23]
[return, return, 24][openpar, (, 24][intnum, 0, 24][closepar, ), 24][semi, ;, 24]
[closecubr, }, 25]

[function, function, 27][id, QUADRATIC, 27][scopeop, ::, 27][id, evaluate, 27][openpar, (, 27][id, x, 27][colon, :, 27][float, float, 27][closepar, ), 27][returntype, =>, 27][float, float, 27]
[opencubr, {, 28]
[localvar, localvar, 29][id, result, 29][colon, :, 29][float, float, 29][semi, ;, 29]
[inlinecmt, //Using Horner's method, 30]
[id, result, 31][assign, =, 31][id, a, 31][semi, ;, 31]
[id, result, 32][assign, =, 32][id, result, 32][mult, *, 32][id, x, 32][plus, +, 32][id, b, 32][semi, ;, 32]
[id, result, 33][assign, =, 33][id, result, 33][mult, *, 33][id, x, 33][plus, +, 33][id, c, 33][semi, ;, 33]
[return, return, 34][openpar, (, 34][id, result, 34][closepar, ), 34][semi, ;, 34]
[closecubr, }, 35]

[function, function, 37][id, QUADRATIC, 37][scopeop, ::, 37][constructor, constructor, 37][openpar, (, 37][id, A, 37][colon, :, 37][float, float, 37][comma, ,, 37][id, B, 37][colon, :, 37][float, float, 37][comma, ,, 37][id, C, 37][colon, :, 37][float, float, 37][closepar, ), 37]
[opencubr, {, 38]
[self, self, 39][dot, ., 39][id, a, 39][assign, =, 39][id, A, 39][semi, ;, 39]
[self, self, 40][dot, ., 40][id, b, 40][assign, =, 40][id, B, 40][semi, ;, 40]
[self, self, 41][dot, ., 41][id, c, 41][assign, =, 41][id, C, 41][semi, ;, 41]
[closecubr, }, 42]

[function, function, 44][id, LINEAR, 44][scopeop, ::, 44][constructor, constructor, 44][openpar, (, 44][id, A, 44][colon, :, 44][float, float, 44][comma, ,, 44][id, B, 44][colon, :, 44][float, float, 44][closepar, ), 44]
[opencubr, {, 45]
[self, self, 46][dot, ., 46][id, a, 46][assign, =, 46][id, A, 46][semi, ;, 46]
[self, self, 47][dot, ., 47][id, b, 47][assign, =, 47][id, B, 47][semi, ;, 47]
[closecubr, }, 48]

[function, function, 50][id, LINEAR, 50][scopeop, ::, 50][id, evaluate, 50][openpar, (, 50][id, x, 50][colon, :, 50][float, float, 50][closepar, ), 50][returntype, =>, 50][float, float, 50]
[opencubr, {, 51]
[localvar, localvar, 52][id, result, 52][colon, :, 52][float, float, 52][semi, ;, 52]
[id, result, 53][assign, =, 53][floatnum, 0.0, 53][semi, ;, 53]
[id, result, 54][assign, =, 54][id, a, 54][mult, *, 54][id, x, 54][plus, +, 54][id, b, 54][semi, ;, 54]
[return, return, 55][openpar, (, 55][id, result, 55][closepar, ), 55][semi, ;, 55]
[closecubr, }, 56]

[inlinecmt, // ====== main ====== //, 58]
[function, function, 59][id, main, 59][openpar, (, 59][closepar, ), 59][returntype, =>, 59][void, void, 59]
[opencubr, {, 60]
[localvar, localvar, 61][id, f1, 61][colon, :, 61][id, LINEAR, 61][openpar, (, 61][intnum, 2, 61][comma, ,, 61][floatnum, 3.5, 61][closepar, ), 61][semi, ;, 61]
[localvar, localvar, 62][id, f2, 62][colon, :, 62][id, QUADRATIC, 62][openpar, (, 62][minus, -, 62][floatnum, 2.0, 62][comma, ,, 62][floatnum, 1.0, 62][comma, ,, 62][floatnum, 0.0, 62][closepar, ), 62][semi, ;, 62]
[localvar, localvar, 63][id, counter, 63][colon, :, 63][integer, integer, 63][assign, =, 63][intnum, 1, 63][semi, ;, 63]

[while, while, 65][openpar, (, 65][id, counter, 65][leq, <=, 65][intnum, 10, 65][closepar, ), 65]
[opencubr, {, 66]
[write, write, 67][openpar, (, 67][id, counter, 67][closepar, ), 67][semi, ;, 67]
[write, write, 68][openpar, (, 68][id, f1, 68][dot, ., 68][id, evaluate, 68][openpar, (, 68][id, counter, 68][closepar, ), 68][closepar, ), 68][semi, ;, 68]
[write, write, 69][openpar, (, 69][id, f2, 69][dot, ., 69][id, evaluate, 69][openpar, (, 69][id, counter, 69][closepar, ), 69][closepar, ), 69][semi, ;, 69]
[closecubr, }, 70][semi, ;, 70]
[closecubr, }, 71]
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 201]
