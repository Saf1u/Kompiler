class man isa fan{
      attribute x:integer;
      attribute h:integer;
      attribute amounts:integer[5];
    public function evaluate:(y: integer) => integer;
    public constructor: (A: integer, B: integer,C:integer,D:integer,E:integer);
};

class fan isa dan,can{

attribute xfan:integer;
public function evaluatefan:(y: integer) => integer;
};

class dan{
attribute xdan:integer;
public function evaluatedan:(y: integer) => integer;
};
class can{
public function evaluatecan:(y: integer) => integer;
attribute xcan:integer;
};

function man::evaluate(y:integer)=>integer{
    return(5);
}
function fan::evaluatefan(y:integer)=>integer{
    return(6);
}
function dan::evaluatedan(y:integer)=>integer{
    return(7);
}
function can::evaluatecan(y:integer)=>integer{
    return(8);
}

function man::constructor(A: integer, B: integer,C:integer,D:integer,E:integer){
    localvar z:man;
    z.x=A;
    z.h=B;
    
    z.amounts[0]=C;
    z.amounts[1]=D;
    z.amounts[2]=E;
    z.amounts[3]=C+10;
    z.amounts[4]=D+10;
    return(z);
}

function main()=>void{
    localvar z:man(2,3,10,20,30);
    /*localvar y:man(10,9,5,4,3);
    write(z.x);
    write(z.h);
    localvar index:integer;
    while(index<>5){
        write(z.amounts[index]);
        index=index+1;
    };
    index=0;
    write(0);
     write(y.x);
    write(y.h);
     while(index<>5){
        write(y.amounts[index]);
        index=index+1;
    };*/
    localvar id:integer;
      id=z.evaluatecan(5);
      write(id);
}

function hello(x:integer,y:integer,z:integer)=>integer{
    write(x+y+z);
    return(-1);
}