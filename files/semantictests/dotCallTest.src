class man isa ram{
      attribute x:integer;
      attribute h:integer;
      attribute amounts:integer[5];
      attribute bossman:boss[4];
     public function mutateX:(y:integer) => integer;
     public function mutateH:(y:integer) => integer;
      public function mutateAmount:(pos:integer,val:integer) => integer;
    public constructor:(A: integer, B: integer,C:integer,D:integer,E:integer);
  
};

class boss isa president{
public function mutateTerm:(y:integer,term:integer,run:integer) => integer;
};

function boss::mutateTerm(term:integer,run:integer,y: integer)=>integer{
    office[term].mutateRun(run,y);
    return(0);
}

class president{
 attribute office:terms[4];
};
class terms{
    attribute runs:integer[5];
    public function mutateRun:(y:integer,pos:integer) => integer;
};
 function terms::mutateRun(pos:integer,val:integer) => integer{
    runs[pos]=val;
    return(0);
 }

class ram isa van,fan{
attribute po:integer;
};
class van{
attribute ro:integer;
};

class fan {
attribute xfan:integer[4];
public function mutatefan:(y: integer,val:integer) => integer;
};

class dan{
attribute xdan:integer;
//public function evaluatedan:(y: integer) => integer;
};
class can{
//public function evaluatecan:(y: integer) => integer;
attribute xcan:integer;
};

function man::mutateH(y: integer)=>integer{
    h=y;
    return(h);
}
function man::mutateX(y: integer)=>integer{
    x=y;
    return(x);
}
function man::mutateAmount(pos:integer,val:integer)=>integer{
    localvar old:integer;
    old=amounts[pos];
    amounts[pos]=val;
    return(old);
}
function fan::mutatefan(y:integer,val:integer)=>integer{
    localvar old:integer;
    old=xfan[y];
    xfan[y]=val;
    return(old);
}
/*
function dan::evaluatedan(y:integer)=>integer{
    return(7);
}
function can::evaluatecan(y:integer)=>integer{
    return(8);
}*/

function man::constructor(A: integer, B: integer,C:integer,D:integer,E:integer){
    localvar z:man;
    z.x=A;
    z.h=B;
    z.amounts[0]=C;
    z.amounts[1]=D;
    z.amounts[2]=E;
    z.amounts[3]=E+10;
    z.amounts[4]=E+20;
    return(z);
}

function main()=>void{
   /*localvar z:man(9,22,10,20,30);
   write(z.xfan[0]);
   z.mutatefan(0,22);
    write(z.xfan[0]);
       write(z.xfan[1]);
   z.mutatefan(1,922);
    write(z.xfan[1]);
       write(z.xfan[0]);
        z.mutatefan(3,322);
    write(z.xfan[3]);
      write(z.xfan[2]);

      write(-1);
      
      write(z.bossman[0].office[0].runs[0]);
      z.bossman[0].mutateTerm(0,0,42);
      z.bossman[1].mutateTerm(1,0,92);
      z.bossman[2].mutateTerm(1,0,62);
      z.bossman[1].mutateTerm(1,2,92);
      z.bossman[2].mutateTerm(2,3,162);
      write(z.bossman[0].office[0].runs[0]);
      write(z.bossman[1].office[1].runs[0]);
      write(z.bossman[2].office[1].runs[0]);
      write(z.bossman[1].office[1].runs[2]);
      write(z.bossman[2].office[2].runs[3]);*/
 /*write(z.x);
   z.mutateX(49);
  write(z.x);

   write(z.h);
   z.mutateH(44);
  write(z.h);

  write(z.amounts[0]);
  write(z.amounts[1]);
  write(z.amounts[2]);
  write(z.amounts[3]);
  write(z.amounts[4]);

  localvar index:integer;

  index=z.mutateAmount(0,90);
  write(index);
  index=z.mutateAmount(1,70);
  write(index);
  index=z.mutateAmount(2,220);
  write(index);
  index=z.mutateAmount(3,720);
  write(index);
  index=z.mutateAmount(4,120);
  write(index);

  write(z.amounts[0]);
  write(z.amounts[1]);
  write(z.amounts[2]);
  write(z.amounts[3]);
  write(z.amounts[4]);

 write(z.x);
 write(z.h);*/
  
}

