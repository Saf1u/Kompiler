class man isa fan{
      attribute x:integer;
      attribute h:integer;
      attribute amounts:integer[5];
     public function mutateX:(y:integer) => integer;
     public function mutateH:(y:integer) => integer;
      public function mutateAmount:(pos:integer,val:integer) => integer;
    public constructor:(A: integer, B: integer,C:integer,D:integer,E:integer);
  
};

class fan {

attribute xfan:integer;
//public function evaluatefan:(y: integer) => integer;
};

class dan{
attribute xdan:integer;
//public function evaluatedan:(y: integer) => integer;
};
class can{
//public function evaluatecan:(y: integer) => integer;
attribute xcan:integer;
};

function man::mutateH(y: integer)=>integer{
    h=y;
    return(h);
}
function man::mutateX(y: integer)=>integer{
    x=y;
    return(x);
}
function man::mutateAmount(pos:integer,val:integer)=>integer{
    amounts[pos]=val;
    return(amounts[pos]);
}
/*function fan::evaluatefan(y:integer)=>integer{
    return(6);
}
function dan::evaluatedan(y:integer)=>integer{
    return(7);
}
function can::evaluatecan(y:integer)=>integer{
    return(8);
}*/

function man::constructor(A: integer, B: integer,C:integer,D:integer,E:integer){
    localvar z:man;
    z.x=A;
    z.h=B;
    z.amounts[0]=C;
    z.amounts[1]=D;
    z.amounts[2]=E;
    z.amounts[3]=E+10;
    z.amounts[4]=E+20;
    return(z);
}

function main()=>void{
   localvar z:man(9,22,10,20,30);
 write(z.x);
   z.mutateX(49);
  write(z.x);

   write(z.h);
   z.mutateH(44);
  write(z.h);

  write(z.amounts[0]);
  write(z.amounts[1]);
  write(z.amounts[2]);
  write(z.amounts[3]);
  write(z.amounts[4]);

  z.mutateAmount(0,90);
  z.mutateAmount(1,70);
  z.mutateAmount(2,220);
  z.mutateAmount(3,720);
  z.mutateAmount(4,120);

  write(z.amounts[0]);
  write(z.amounts[1]);
  write(z.amounts[2]);
  write(z.amounts[3]);
  write(z.amounts[4]);
  
 write(z.x);
 write(z.h);
  
}

