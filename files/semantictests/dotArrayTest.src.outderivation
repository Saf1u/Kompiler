 REPTSTART0
 CLASSDECLORFUNCDEF REPTSTART0
 FUNCDEF REPTSTART0
 FUNCHEAD FUNCBODY REPTSTART0
 function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : id S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man ARRAYSIZE REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man lsqbr ARRAYSIZEPRIME REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ ARRAYSIZEPRIME REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ intlit S5X rsqbr REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 S5X rsqbr REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] S9 S28 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX VARIABLEASSIGNORFUNCCALLPRIME1 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( EXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( lpar ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( TERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index ADDOP S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index plus S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * intlit S5 S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 S5 S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) semi REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] S9 S28 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX VARIABLEORFUNCPRIME1 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX S3 lpar APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } CLASSDECL REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } S45 class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class id S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man S1 S3 OPTCLASSDECL2 S44 lcurbr REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { MEMBERVARDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute id S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x S1 colon TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : TYPE S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer S2 S3 REPTMEMBERVARDECL4 S6 S42 semi REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; VISIBILITY S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public S41 MEMBERDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public MEMBERFUNCDECL REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function id S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX S1 colon S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : S3 lpar FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( FPARAMS rpar S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) S35 arrow RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => RETURNTYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => TYPE S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer S2E semi S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; S43 REPTCLASSDECL4 rcurbr semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } semi S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; S46 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; FUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man sr FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: FUNCCONSTRUCTORORMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: id S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX S1 FUNCMETHOD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => TYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return lpar EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( EXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( ARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) semi S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; S31 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : id S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man ARRAYSIZE REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man lsqbr ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ intlit S5X rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 S5X rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr S3 INDICE VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr lsqbr ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ ARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] VARIABLEASSIGNORFUNCCALLPRIME2 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] S9 S28 dot id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . id S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX S1 S8 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX VARIABLEASSIGNORFUNCCALLPRIME1 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX S3 lpar APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( APARAMS rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( EXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( TERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( lpar ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( ARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( TERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index ADDOP S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index plus S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + S20 TERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR rpar RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) MULTOP S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) mult S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * S18 FACTOR S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * intlit S5 S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 S5 S19 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR REPTAPARAMS1 rpar S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) S22 S29 VARIABLEASSIGNORFUNCCALLPRIME3 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) semi REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } CLASSDECLORFUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } FUNCDEF REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } FUNCHEAD FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function id S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer S40 FUNCSCOPEDFREE FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer S38 S3 lpar FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( FPARAMS S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( id S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr S1 colon TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : TYPE S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : id S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man S2 S3 REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man ARRAYSIZE REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man lsqbr ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ ARRAYSIZEPRIME REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ intlit S5X rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 S5X rsqbr REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] REPTFPARAMS3 S6 S7 REPTFPARAMS4 S35 rpar arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) arrow RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => RETURNTYPE S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void S2E FUNCBODY REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void lcurbr S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { S3 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; LOCALVARDECL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar id S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var S1 colon TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : TYPE S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer S2 LOCALVARDECLPRIME S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer S3 REPTLOCALVARDECL4 S6 semi S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; S7 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; VARIABLEASSIGNORFUNCCALL REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index equal EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = EXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = ARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 S5 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; S27 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; LOCALVARDECLORSTMT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; STATEMENT REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while lpar MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( MYRELEXPRCONSTRUCT rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( ARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( TERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELOP S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index neq S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> S23 ARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> TERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> FACTOR RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> intlit S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 S5 RIGHTRECTERM RIGHTRECARITHEXPR S24 rpar S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) S3 STATBLOCK S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) lcurbr REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr S3 INDICE VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr lsqbr ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ ARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ TERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ FACTOR RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR rsqbr VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] VARIABLEORFUNCPRIME2 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] S9 S28 dot id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . id S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX S1 S8 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX VARIABLEORFUNCPRIME1 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX S3 lpar APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( APARAMS rpar S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) S22 S29 VARIABLEORFUNCPRIME3 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write lpar EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( EXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( ARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( TERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR rpar semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) semi S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; S30 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; STATEMENT REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; VARIABLEASSIGNORFUNCCALL REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; id S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index S1 VARIABLEASSIGNORFUNCCALLPRIME REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index S3 S9 S10 ASSIGNOP EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index equal EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = EXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = ARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = TERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = FACTOR RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = VARIABLEORFUNC RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = id S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index S1 VARIABLEORFUNCPRIME RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index S3 S9 S10 RIGHTRECTERM RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index ADDOP S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index plus S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + S20 TERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + FACTOR RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + intlit S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 S5 RIGHTRECTERM S21 RIGHTRECARITHEXPR RELEXPR semi S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; S27 REPTSTATBLOCK1 rcurbr S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } S32 semi S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; S34 REPTFUNCBODY1 S32 rcurbr S36 REPTSTART0
function main ( ) => void { localvar index : integer ; localvar arr : Man [ 5 ] ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; localvar index : integer ; index = 0 ; localvar var : integer ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } class Man { attribute x : integer ; public function setX : ( y : integer ) => void ; public function getX : ( ) => integer ; } ; function Man :: setX ( y : integer ) => void { x = y ; } function Man :: getX ( ) => integer { return ( x ) ; } function play ( arr : Man [ 5 ] ) => void { localvar index : integer ; index = 0 ; while ( index <> 5 ) { arr [ index ] . setX ( ( index + 1 ) * 2 ) ; index = index + 1 ; } ; } function writer ( arr : Man [ 5 ] ) => void { localvar index : integer ; localvar var : integer ; index = 0 ; while ( index <> 5 ) { var = arr [ index ] . getX ( ) ; write ( var ) ; index = index + 1 ; } ; } S36 REPTSTART0
