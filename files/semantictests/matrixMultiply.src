function main()=>void{
    localvar matrixa:Matrix(10,9,4,
                            6,71,11,
                            2,4,5);
    localvar matrixb:Matrix(1,11,7,
                           12,42,21,
                           42,2,4);
    localvar matrixc:Matrix;
    matrixc=matrixa.multiply(matrixb);
    matrixc.print();
    write(-1);
    matrixa.print();
    write(-1);
    matrixb.print();
    write(matrixb.matrix[3-1][1-1]);
    write(matrixb.flag);

    
}



class Matrix{
attribute matrix:integer[3][3];
attribute flag:integer;
public constructor: (a: integer,b:integer,c:integer,d:integer,e:integer,f:integer,g:integer,h:integer,i:integer);
 public function multiply:(x:Matrix)=>Matrix;
 public function print:()=>void;
 private function TestSelf:(v:integer)=>void;
};

 function Matrix::constructor(a: integer,b:integer,c:integer,d:integer,e:integer,f:integer,g:integer,h:integer,i:integer){
    localvar mat:Matrix;
     mat.matrix[0][0]=a;
     mat.matrix[0][1]=b;
     mat.matrix[0][2]=c;

     mat.matrix[1][0]=d;
     mat.matrix[1][1]=e;
     mat.matrix[1][2]=f;


     mat.matrix[2][0]=g;
     mat.matrix[2][1]=h;
     mat.matrix[2][2]=i;
     return(mat);

}

 function Matrix::multiply(x:Matrix)=>Matrix{
    localvar i:integer;
    localvar j:integer;
    localvar n:integer;
    localvar matrixc:Matrix(0,0,0,0,0,0,0,0,0);
    i=0;
    j=0;
    n=0;
    while(i<>3){
        j=0;
        while(j<>3){
            n=0;
            while(n<>3){
                matrixc.matrix[i][j]=(self.matrix[i][n]*x.matrix[n][j])+matrixc.matrix[i][j];
                n=n+1;
            };
            j=j+1;
        };
        i=i+1;
    };
    return (matrixc);
}
 function Matrix::print()=>void{
    self.TestSelf(341);
    localvar i:integer;
    localvar j:integer;
    i=0;
    j=0;
    while(i<>3){
        j=0;
        while(j<>3){
            write(self.matrix[i][j]);
            j=j+1;
        };
        i=i+1;
    };
}

function Matrix::TestSelf(val:integer)=>void{
    flag=val;
}